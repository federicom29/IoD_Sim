{
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": "-- Grafana --",
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "target": {
          "limit": 100,
          "matchAny": false,
          "tags": [],
          "type": "dashboard"
        },
        "type": "dashboard"
      }
    ]
  },
  "editable": true,
  "fiscalYearStartMonth": 0,
  "graphTooltip": 0,
  "iteration": 1652868972915,
  "links": [],
  "liveNow": false,
  "panels": [
    {
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "align": "auto",
            "displayMode": "auto"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 8,
        "w": 12,
        "x": 0,
        "y": 0
      },
      "id": 4,
      "options": {
        "footer": {
          "fields": "",
          "reducer": [
            "sum"
          ],
          "show": false
        },
        "showHeader": true
      },
      "pluginVersion": "8.4.6",
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "U0rlR3U7z"
          },
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT\n  id,\n  name,\n  time_start,\n  time_end\nFROM scenario_executions\nWHERE\n  $__timeFilter(time_start)\nORDER BY time_start DESC",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "time_sim"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "drones_position",
          "timeColumn": "time_real",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "title": "Latest Scenario Executions",
      "type": "table"
    },
    {
      "gridPos": {
        "h": 9,
        "w": 12,
        "x": 12,
        "y": 0
      },
      "id": 2,
      "options": {
        "config": "",
        "data": "",
        "layout": "",
        "onclick": "console.log(data)\nwindow.updateVariables({query:{'var-project':'test'}, partial: true})",
        "script": "console.log(data)\n\nfunction unique(value, index, self) {\n  return self.indexOf(value) === index\n}\n\nlet droneIds = data.series[0].fields[1].values.buffer\nlet drones = droneIds.filter(unique)\nlet nDrones = drones.length\nvar drones_pos_x = []\nvar drones_pos_y = []\nvar drones_pos_z = []\n\nfor (var i = 0; i < nDrones; i++) {\n  let droneId = drones[i];\n  var pos_x = []\n  var pos_y = []\n  var pos_z = []\n\n  for (var j = 0; j < droneIds.length; j++) {\n    if (droneIds[j] == droneId) {\n      pos_x.push(data.series[0].fields[2].values.buffer[j])\n      pos_y.push(data.series[0].fields[3].values.buffer[j])\n      pos_z.push(data.series[0].fields[4].values.buffer[j])\n    }\n  }\n\n  drones_pos_x.push(pos_x)\n  drones_pos_y.push(pos_y)\n  drones_pos_z.push(pos_z)\n}\n\nvar traces = []\nfor (var i = 0; i < nDrones; i++) {\n  traces.push({\n    x: drones_pos_x[i],\n    y: drones_pos_y[i],\n    z: drones_pos_z[i],\n    type: 'scatter3d',\n    mode: (drones_pos_x[i].length > 1) ? 'lines' : 'markers',\n    name: `Drone #${drones[i]}`,\n    opacity: 1,\n    line: {\n      width: 6,\n    },\n    marker: {\n      size: 6\n    }\n  })\n}\n\nreturn {data:traces,layout:{}};\n"
      },
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "U0rlR3U7z"
          },
          "format": "time_series",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT \n  time_real AS \"time\",\n  drone_id,\n  pos_x AS \"x\",\n  pos_y AS \"y\",\n  pos_z AS \"z\"\nFROM drones_position\nWHERE drone_id IN ($droneId)\nORDER BY time_real",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "time_sim"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "drones_position",
          "timeColumn": "time_real",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "title": "Drone Trajectory",
      "type": "ae3e-plotly-panel"
    },
    {
      "gridPos": {
        "h": 8,
        "w": 12,
        "x": 0,
        "y": 8
      },
      "id": 6,
      "options": {
        "onclick": "console.log(data)\nwindow.updateVariables({query:{'var-project':'test'}, partial: true})",
        "script": "console.log(data)\n\nfunction unique(value, index, self) {\n  return self.indexOf(value) === index\n}\n\nlet droneIds = data.series[0].fields[1].values.buffer\nlet drones = droneIds.filter(unique)\nlet nDrones = drones.length\nvar drones_rssi = []\nvar drones_time = []\n\nfor (var i = 0; i < nDrones; i++) {\n  let droneId = drones[i];\n  var rssi = []\n  var time = []\n\n  for (var j = 0; j < droneIds.length; j++) {\n    if (droneIds[j] == droneId) {\n      rssi.push(data.series[0].fields[2].values.buffer[j])\n      time.push(data.series[0].fields[0].values.buffer[j])\n    }\n  }\n\n  drones_rssi.push(rssi)\n  drones_time.push(time)\n}\n\nvar traces = []\nfor (var i = 0; i < nDrones; i++) {\n  traces.push({\n    x: drones_time[i],\n    y: drones_rssi[i],\n    mode: 'lines',\n    name: `Drone #${drones[i]}`,\n  })\n}\n\nreturn {data:traces,layout:{\n  xaxis: {\n    autorange: true,\n  },\n  yaxis: {\n    autorange: true,\n  }\n}};\n"
      },
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "U0rlR3U7z"
          },
          "format": "time_series",
          "group": [],
          "hide": false,
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT\n  time_real AS \"time\",\n  drone_id,\n  rssi\nFROM wifi_rssi\nWHERE\n  scenario_id = '$scenarioId'\n  AND drone_id IN ($droneId)\nORDER BY 1",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "time_sim"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "drones_position",
          "timeColumn": "time_real",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "title": "Drone RSSI",
      "type": "ae3e-plotly-panel"
    },
    {
      "gridPos": {
        "h": 8,
        "w": 12,
        "x": 12,
        "y": 9
      },
      "id": 8,
      "options": {
        "onclick": "console.log(data)\nwindow.updateVariables({query:{'var-project':'test'}, partial: true})",
        "script": "console.log(data)\n\nfunction unique(value, index, self) {\n  return self.indexOf(value) === index\n}\n\nlet droneIds = data.series[0].fields[1].values.buffer\nlet drones = droneIds.filter(unique)\nlet nDrones = drones.length\nvar drones_sinr = []\nvar drones_time = []\n\nfor (var i = 0; i < nDrones; i++) {\n  let droneId = drones[i];\n  var sinr = []\n  var time = []\n\n  for (var j = 0; j < droneIds.length; j++) {\n    if (droneIds[j] == droneId) {\n      sinr.push(data.series[0].fields[2].values.buffer[j])\n      time.push(data.series[0].fields[0].values.buffer[j])\n    }\n  }\n\n  drones_sinr.push(sinr)\n  drones_time.push(time)\n}\n\nvar traces = []\nfor (var i = 0; i < nDrones; i++) {\n  traces.push({\n    x: drones_time[i],\n    y: drones_sinr[i],\n    mode: 'lines',\n    name: `Drone #${drones[i]}`,\n  })\n}\n\nreturn {data:traces,layout:{}};\n"
      },
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "U0rlR3U7z"
          },
          "format": "time_series",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT\n  time_real AS \"time\",\n  drone_id,\n  10*log(sinr) AS sinr_dbm\nFROM lte_current_cell_rsrp_sinr\nWHERE\n  $__timeFilter(time_real)\n  AND scenario_id = '$scenarioId'\n  AND drone_id IN ($droneId)\nORDER BY 1",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "time_sim"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "drones_position",
          "timeColumn": "time_real",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "title": "LTE SINR [dB]",
      "type": "ae3e-plotly-panel"
    },
    {
      "description": "",
      "gridPos": {
        "h": 8,
        "w": 12,
        "x": 12,
        "y": 17
      },
      "id": 9,
      "options": {
        "onclick": "console.log(data)\nwindow.updateVariables({query:{'var-project':'test'}, partial: true})",
        "script": "console.log(data)\n\nfunction unique(value, index, self) {\n  return self.indexOf(value) === index\n}\n\nlet droneIds = data.series[0].fields[1].values.buffer\nlet drones = droneIds.filter(unique)\nlet nDrones = drones.length\nvar drones_sinr = []\nvar drones_time = []\n\nfor (var i = 0; i < nDrones; i++) {\n  let droneId = drones[i];\n  var sinr = []\n  var time = []\n\n  for (var j = 0; j < droneIds.length; j++) {\n    if (droneIds[j] == droneId) {\n      sinr.push(data.series[0].fields[2].values.buffer[j])\n      time.push(data.series[0].fields[0].values.buffer[j])\n    }\n  }\n\n  drones_sinr.push(sinr)\n  drones_time.push(time)\n}\n\nvar traces = []\nfor (var i = 0; i < nDrones; i++) {\n  traces.push({\n    x: drones_time[i],\n    y: drones_sinr[i],\n    mode: 'lines',\n    name: `Drone #${drones[i]}`,\n  })\n}\n\nreturn {data:traces,layout:{}};\n"
      },
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "U0rlR3U7z"
          },
          "format": "time_series",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT\n  time_real AS \"time\",\n  drone_id,\n  rsrp\nFROM lte_ue_measurements\nWHERE\n  $__timeFilter(time_real)\n  AND scenario_id = '$scenarioId'\n  AND drone_id IN ($droneId)\nORDER BY 1",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "time_sim"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "drones_position",
          "timeColumn": "time_real",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "title": "LTE RSRP [dBm]",
      "type": "ae3e-plotly-panel"
    }
  ],
  "refresh": "",
  "schemaVersion": 35,
  "style": "dark",
  "tags": [],
  "templating": {
    "list": [
      {
        "current": {
          "selected": false,
          "text": "ceb1aca4-de31-4955-b3ec-c235d6bddcc3",
          "value": "ceb1aca4-de31-4955-b3ec-c235d6bddcc3"
        },
        "definition": "SELECT id\nFROM scenario_executions\nORDER BY time_start DESC;",
        "hide": 0,
        "includeAll": false,
        "label": "Scenario ID",
        "multi": false,
        "name": "scenarioId",
        "options": [],
        "query": "SELECT id\nFROM scenario_executions\nORDER BY time_start DESC;",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "type": "query"
      },
      {
        "allValue": "SELECT drone_id FROM drones_position",
        "current": {
          "selected": true,
          "text": [
            "0",
            "1",
            "2",
            "3",
            "4"
          ],
          "value": [
            "0",
            "1",
            "2",
            "3",
            "4"
          ]
        },
        "definition": "SELECT DISTINCT drone_id \nFROM drones_position \nWHERE scenario_id = '$scenarioId'\nORDER BY drone_id;",
        "hide": 0,
        "includeAll": true,
        "label": "Drone #",
        "multi": true,
        "name": "droneId",
        "options": [],
        "query": "SELECT DISTINCT drone_id \nFROM drones_position \nWHERE scenario_id = '$scenarioId'\nORDER BY drone_id;",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "type": "query"
      }
    ]
  },
  "time": {
    "from": "now-6M",
    "to": "now"
  },
  "timepicker": {
    "hidden": false
  },
  "timezone": "",
  "title": "IoD Sim",
  "uid": "rwHh7qU7z",
  "version": 4,
  "weekStart": ""
}